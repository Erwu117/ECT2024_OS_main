To Do:
    -Adjust sleep time as necessary
    -Send data to gui and through the API
    -adjust sea_level_pressure depending on location

References:
    https://github.com/jposada202020/CircuitPython_BMP180
    https://www.raspberrypi-spy.co.uk/2015/04/bmp180-i2c-digital-barometric-pressure-sensor/

Install: 
    pip install adafruit-circuitpython-bmp180
Initialize:
    nano bmp180.py

Import:
    time - sleep script in between readings
    bmp180 - import sensor
    board - reference raspberry pi

Code:
    i2c = board.I2C()
    bmp = bmp180.BMP180(i2c)

    # change this to match the location's pressure (hPa) at sea level
    bmp.sea_level_pressure = 1013.25 //Necessary to get accurate altitude readings

    while True:
        bmp_tempc = bmp.temperature
        bmp_pressure = bmp.pressure
        bmp_altitude = bmp.altitude


        //Change to send data where it is needed
        print(f"Temperature: {bmp.temperature:.1f} °C")
        print(f"Pressure: {bmp.pressure:.1f} hPa")
        print(f"Altitude: {bmp.altitude:.1f} mts")
        print("")


        time.sleep(2) //Adjust time as necessary



///bmp280

import time
import smbus2
import bme280

# BME280 sensor address (default address)
address = 0x76

# Initialize I2C bus
bus = smbus2.SMBus(1)

# Load calibration parameters
calibration_params = bme280.load_calibration_params(bus, address)

def celsius_to_fahrenheit(celsius):
    return (celsius * 9/5) + 32

while True:
    try:
        # Read sensor data
        data = bme280.sample(bus, address, calibration_params)

        # Extract temperature, pressure, and humidity
        temperature_celsius = data.temperature
        pressure = data.pressure
        humidity = data.humidity

        # Convert temperature to Fahrenheit
        temperature_fahrenheit = celsius_to_fahrenheit(temperature_celsius)

        # Print the readings
        print("Temperature: {:.2f} °C, {:.2f} °F".format(temperature_celsius, temperature_fahrenheit))
        print("Pressure: {:.2f} hPa".format(pressure))
        print("Humidity: {:.2f} %".format(humidity))

        # Wait for a few seconds before the next reading
        time.sleep(2)
